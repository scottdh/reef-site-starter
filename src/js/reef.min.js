/*! reefjs v4.1.12 | (c) 2020 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/reef */
Element.prototype.matches ||
  (Element.prototype.matches =
    Element.prototype.msMatchesSelector ||
    Element.prototype.webkitMatchesSelector),
  (function (t, e) {
    "function" == typeof define && define.amd
      ? define([], function () {
          return e(t);
        })
      : "object" == typeof exports
      ? (module.exports = e(t))
      : (t.Reef = e(t));
  })(
    "undefined" != typeof global
      ? global
      : "undefined" != typeof window
      ? window
      : this,
    function (t) {
      "use strict";
      var e,
        n = [
          "checked",
          "disabled",
          "hidden",
          "lang",
          "readonly",
          "required",
          "selected",
          "value",
        ],
        r = !1,
        o = function (t) {
          return Object.prototype.toString.call(t).slice(8, -1).toLowerCase();
        },
        a = function (t) {
          if (r) throw new Error(t);
        },
        i = function (t, e) {
          var n = o(t);
          if ("object" === n) {
            var r = {};
            for (var a in t) t.hasOwnProperty(a) && (r[a] = i(t[a], e));
            return r;
          }
          if ("array" === n)
            return t.map(function (t) {
              return i(t, e);
            });
          if ("string" === n && !e) {
            var c = document.createElement("div");
            return (c.textContent = t), c.innerHTML;
          }
          return t;
        },
        c = function (t, e) {
          var n = t.filter(e);
          return n.length < 1 ? null : n[0];
        },
        l = function (t, e) {
          if (!(t || (e && e.lagoon)))
            return a(
              "Reef.js: You did not provide an element to make into a component."
            );
          if (!e || (!e.template && !e.lagoon))
            return a(
              "Reef.js: You did not provide a template for this component."
            );
          if (
            ((this.elem = t),
            (this.data = e.data),
            (this.template = e.template),
            (this.allowHTML = e.allowHTML),
            (this.attached = []),
            (this.lagoon = e.lagoon),
            e.attachTo)
          ) {
            var n = this;
            e.attachTo.forEach(function (t) {
              "attach" in t && t.attach(n);
            });
          }
        },
        u = function (t, e) {
          e.forEach(function (e) {
            t.style[e] = "";
          });
        },
        d = function (t, e) {
          e.forEach(function (e) {
            if ("class" === e.att) t.className = e.value;
            else if ("style" === e.att)
              !(function (t, e) {
                var n = (function (t) {
                    return t.split(";").reduce(function (t, e) {
                      if (e.indexOf(":") > 0) {
                        var n = e.trim().split(":");
                        t.push({
                          name: n[0] ? n[0].trim() : "",
                          value: n[1] ? n[1].trim() : "",
                        });
                      }
                      return t;
                    }, []);
                  })(e),
                  r = Array.prototype.filter.call(t.style, function (e) {
                    return (
                      null ===
                      c(n, function (n) {
                        return n.name === e && n.value === t.style[e];
                      })
                    );
                  });
                u(t, r),
                  (function (t, e) {
                    e.forEach(function (e) {
                      t.style[e.name] = e.value;
                    });
                  })(t, n);
              })(t, e.value);
            else {
              if (e.att in t)
                try {
                  t[e.att] = e.value || e.att;
                } catch (t) {}
              t.setAttribute(e.att, e.value || "");
            }
          });
        },
        f = function (t, e) {
          return { att: t, value: e };
        },
        s = function (t) {
          var e = (function (t) {
            return Array.prototype.reduce.call(
              t.attributes,
              function (t, e) {
                return n.indexOf(e.name) < 0 && t.push(f(e.name, e.value)), t;
              },
              []
            );
          })(t);
          return (
            (function (t, e) {
              n.forEach(function (n) {
                t[n] && e.push(f(n, t[n]));
              });
            })(t, e),
            e
          );
        },
        h = function (t) {
          var e;
          return (
            (e =
              "text" === t.type
                ? document.createTextNode(t.content)
                : "comment" === t.type
                ? document.createComment(t.content)
                : t.isSVG
                ? document.createElementNS("http://www.w3.org/2000/svg", t.type)
                : document.createElement(t.type)),
            d(e, t.atts),
            t.children.length > 0
              ? t.children.forEach(function (t) {
                  e.appendChild(h(t));
                })
              : "text" !== t.type && (e.textContent = t.content),
            e
          );
        },
        p = function (t, e) {
          var n,
            r = e.atts.filter(function (e) {
              return (
                null ===
                c(t.atts, function (t) {
                  return e.att === t.att;
                })
              );
            }),
            o = t.atts.filter(function (t) {
              var n = c(e.atts, function (e) {
                return t.att === e.att;
              });
              return null === n || n.value !== t.value;
            });
          d(e.node, o),
            (n = e.node),
            r.forEach(function (t) {
              if ("class" === t.att) n.className = "";
              else if ("style" === t.att)
                u(n, Array.prototype.slice.call(n.style));
              else {
                if (t.att in n)
                  try {
                    n[t.att] = "";
                  } catch (t) {}
                n.removeAttribute(t.att);
              }
            });
        },
        m = function (t, e, n, r) {
          var o = e.length - t.length;
          if (o > 0)
            for (; o > 0; o--)
              e[e.length - o].node.parentNode.removeChild(e[e.length - o].node);
          t.forEach(function (o, a) {
            if (e[a])
              if (t[a].type === e[a].type) {
                if (
                  (p(t[a], e[a]),
                  !(
                    r.filter(function (t) {
                      return 3 !== o.node.nodeType && o.node.matches(t);
                    }).length > 0
                  ))
                )
                  if (
                    (t[a].content &&
                      t[a].content !== e[a].content &&
                      (e[a].node.textContent = t[a].content),
                    e[a].children.length > 0 && o.children.length < 1)
                  )
                    e[a].node.innerHTML = "";
                  else {
                    if (e[a].children.length < 1 && o.children.length > 0) {
                      var i = document.createDocumentFragment();
                      return (
                        m(o.children, e[a].children, i, r),
                        void e[a].node.appendChild(i)
                      );
                    }
                    o.children.length > 0 &&
                      m(o.children, e[a].children, e[a].node, r);
                  }
              } else e[a].node.parentNode.replaceChild(h(t[a]), e[a].node);
            else n.appendChild(h(t[a]));
          });
        },
        y = function (t, e) {
          return Array.prototype.map.call(t.childNodes, function (t) {
            var n = {
              content:
                t.childNodes && t.childNodes.length > 0 ? null : t.textContent,
              atts: 1 !== t.nodeType ? [] : s(t),
              type:
                3 === t.nodeType
                  ? "text"
                  : 8 === t.nodeType
                  ? "comment"
                  : t.tagName.toLowerCase(),
              node: t,
            };
            return (
              (n.isSVG = e || "svg" === n.type), (n.children = y(t, n.isSVG)), n
            );
          });
        },
        v = function (t, e) {
          t &&
            t.forEach(function (t) {
              if (t.attached.indexOf(e) > -1)
                return a(
                  "ReefJS: " +
                    e.elem +
                    " has attached nodes that it is also attached to, creating an infinite loop."
                );
              "render" in t && t.render();
            });
        };
      return (
        (l.prototype.render = function () {
          if (this.lagoon) v(this.attached, this);
          else {
            if (!this.template) return a("Reef.js: No template was provided.");
            var n =
              "string" === o(this.elem)
                ? document.querySelector(this.elem)
                : this.elem;
            if (!n)
              return a(
                "Reef.js: The DOM element to render your template into was not found."
              );
            var r = i(this.data || {}, this.allowHTML),
              c =
                "function" === o(this.template)
                  ? this.template(r)
                  : this.template;
            if (
              -1 !== ["string", "number"].indexOf(o(c)) &&
              n.innerHTML !== c.innerHTML
            ) {
              if (n.innerHTML.trim().length < 1 || c.trim().length < 1)
                n.innerHTML = c;
              else {
                var l = y(
                    (function (t) {
                      if (e) {
                        var n = new DOMParser().parseFromString(t, "text/html");
                        return (
                          n.head.childNodes.length > 0 &&
                            Array.prototype.slice
                              .call(n.head.childNodes)
                              .reverse()
                              .forEach(function (t) {
                                n.body.insertBefore(t, n.body.firstChild);
                              }),
                          n.body
                        );
                      }
                      var r = document.createElement("div");
                      return (r.innerHTML = t), r;
                    })(c)
                  ),
                  u = y(n),
                  d = this.attached.map(function (t) {
                    return t.elem;
                  });
                m(l, u, n, d);
              }
              var f;
              return (
                "function" === o(t.CustomEvent)
                  ? (f = new CustomEvent("render", { bubbles: !0 }))
                  : (f = document.createEvent("CustomEvent")).initCustomEvent(
                      "render",
                      !0,
                      !1,
                      null
                    ),
                n.dispatchEvent(f),
                v(this.attached, this),
                n
              );
            }
          }
        }),
        (l.prototype.getData = function () {
          return i(this.data, !0);
        }),
        (l.prototype.setData = function (t) {
          if ("object" !== o(t))
            return a("ReefJS: The provided data is not an object.");
          for (var e in t) t.hasOwnProperty(e) && (this.data[e] = t[e]);
          this.render();
        }),
        (l.prototype.attach = function (t) {
          "array" === o(t)
            ? Array.prototype.push.apply(this.attached, t)
            : this.attached.push(t);
        }),
        (l.prototype.detach = function (t) {
          var e = "array" === o(t);
          this.attached = this.attached.filter(function (n) {
            return e ? -1 === t.indexOf(n) : n !== t;
          });
        }),
        (l.debug = function (t) {
          r = !!t;
        }),
        (e = (function () {
          if (!t.DOMParser) return !1;
          var e = new DOMParser();
          try {
            e.parseFromString("x", "text/html");
          } catch (t) {
            return !1;
          }
          return !0;
        })()),
        l
      );
    }
  );
